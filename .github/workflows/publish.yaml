
name: Publish

on:

  push:
    branches: [ master, main, develop, feature/github-actions]
    tags: 'v*.*.*'
  
  release:
    types: [published]

  workflow_dispatch:

jobs:

  init:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.setvars.outputs.build_type }}
      build_tests: ${{ steps.setvars.outputs.build_tests }}

    steps:
      - name: Cancel previous workflow
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ github.token }}

      - name: Set variables
        id: setvars
        #Only build the tests in a debug build, tests currently don't build in release mode
        run: |
          echo ${{github.base_ref}}
          echo ${{github.ref}}
          if [[ "${{github.base_ref}}" == "develop" || "${{github.ref}}" == "refs/heads/develop" ]]; then
            echo "::set-output name=build_type::DEBUG"
          else
            echo "::set-output name=build_type::RELEASE"
          fi

  #~ test_docker:
    #~ runs-on: ubuntu-latest
    #~ steps:
      #~ - name: Checkout the repo 
        #~ uses: actions/checkout@v2
        #~ with:
          #~ submodules: recursive
      #~ - name: Build and run
        #~ run: |
          #~ cd ${{github.workspace}}
          #~ docker build \
            #~ --build-arg IMG_USER=project8 \
            #~ --build-arg IMG_REPO=p8compute_dependencies \
            #~ --build-arg IMG_TAG=v1.0.0.beta \
            #~ --build-arg PSYLLID_BASE_PREFIX=/usr/local/p8/psyllid \
            #~ --build-arg PSYLLID_PREFIX_TAG=test \
            #~ --tag project8/psyllid:test \
            #~ .
          
          
  #~ test_linux_gcc:
    #~ runs-on: ubuntu-latest

    #~ steps:
      #~ - name: Checkout the repo 
        #~ uses: actions/checkout@v2
        #~ with:
          #~ submodules: recursive
      #~ - name: Install dependencies
        #~ run: |
          #~ sudo apt-get update
          #~ sudo apt-get clean \
          #~ sudo apt-get --fix-missing -y install \
            #~ build-essential \
            #~ cmake \
            #~ libfftw3-3 \
            #~ libfftw3-dev \
            #~ gdb \
            #~ libboost-all-dev \
            #~ libhdf5-dev \
            #~ librabbitmq-dev \
            #~ rapidjson-dev \
            #~ libyaml-cpp-dev \
            #~ pybind11-dev \
            #~ wget \
      #~ - name: Configure CMake
      #~ # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      #~ # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        #~ run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      #~ - name: Build
        #~ run: |
          #~ cd ${{github.workspace}}/build
          #~ make -j3 install
          
      #TODO add tests for Psyllid
      #~ - name: Run tests
        #~ run: |
          #~ cd build/testing
          #~ ./run_tests

  publish:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
   # needs: [test_docker, test_linux_gcc]
    needs: init
    steps:
    
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: project8/locust_mc
          tag-sha: false
          tag-semver: |
            {{raw}}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
          
      - name: List platforms
        run: echo ${{ steps.setup_buildx.outputs.platforms }}
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Push to Docker Hub
        id: build_push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            IMG_USER=project8
            IMG_REPO=p8compute_dependencies
            IMG_TAG=v1.0.0.beta
            LOCUST_TAG=${{ env.RELEASE_VERSION }}
            build_type=${{needs.init.outputs.build_type}}
          tags: ${{ steps.docker_meta.outputs.tags }}
